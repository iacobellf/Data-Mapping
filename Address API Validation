!pip install -U googlemaps
import googlemaps
from google.colab import files
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import OneHotEncoder

API_KEY = 'API Key'  # Replace with company API key
gmaps = googlemaps.Client(key=API_KEY)

uploaded = files.upload()
data = pd.read_csv(list(uploaded.keys())[0])

def validate_and_correct_address_gmaps(row):
    try:
        address = f"{row['StreetAddress1']}, {row['City']}, {row['State']}, {row['Zipcode']}, {row['Country']}"
        geocode_result = gmaps.geocode(address)
        if geocode_result:
            corrected_address = geocode_result[0]['formatted_address']
            return 'valid', corrected_address
        else:
            return 'invalid', None
    except Exception as e:
        return 'invalid', None

data['Status'], data['CorrectedAddress'] = zip(*data.apply(validate_and_correct_address_gmaps, axis=1))

def split_address(address):
    if not address:
        return '', '', '', '', ''
    components = address.split(',')
    street = components[0].strip() if len(components) > 0 else ''
    city = components[1].strip() if len(components) > 1 else ''
    state_zip = components[2].strip() if len(components) > 2 else ''
    state = ' '.join(state_zip.split()[:-1]) if state_zip else ''
    zipcode = state_zip.split()[-1] if state_zip else ''
    country = components[3].strip() if len(components) > 3 else ''
    return street, city, state, zipcode, country

data['StreetAddress1 Corrected'], data['City Corrected'], data['State Corrected'], data['Zipcode Corrected'], data['Country Corrected'] = zip(*data['CorrectedAddress'].apply(split_address))

label_mapping = {'valid': 1, 'invalid': 0}
data['Label'] = data['Status'].map(label_mapping)

features = ['StreetAddress1', 'City', 'State', 'Zipcode', 'Country',
            'StreetAddress1 Corrected', 'City Corrected', 'State Corrected',
            'Zipcode Corrected', 'Country Corrected']
X = data[features]
y = data['Label']

encoder = OneHotEncoder(sparse=False)
X_encoded = encoder.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.3)

rf = RandomForestClassifier()
rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)
unique_classes = list(set(y_test) | set(y_pred))
if len(unique_classes) == 1:
    target_names = ['valid'] if unique_classes[0] == 1 else ['invalid']
else:
    target_names = ['invalid', 'valid']

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred, target_names=target_names))

output_data = data[['StreetAddress1', 'City', 'State', 'Zipcode', 'Country', 'Status', 'CorrectedAddress', 'StreetAddress1 Corrected', 'City Corrected', 'State Corrected', 'Zipcode Corrected', 'Country Corrected']]
output_filename = "address_output.csv"
output_data.to_csv(output_filename, index=False)

files.download(output_filename)
